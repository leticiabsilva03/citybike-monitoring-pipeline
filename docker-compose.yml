services:
  # ------------------------------
  # MinIO: S3-compatible storage
  # ------------------------------
  minio:
    image: minio/minio:latest
    container_name: cb_minio
    command: server /data --console-address ':9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - '9000:9000'
      - '9001:9001'
    healthcheck:
      test: ["CMD-SHELL", "echo > /dev/tcp/127.0.0.1/9000"]
      interval: 30s
      retries: 3
    restart: unless-stopped

  # -----------------------------------------
  # PostgreSQL: Data Warehouse (Gold) + Metadata
  # -----------------------------------------
  postgres:
    image: postgres:14-alpine
    container_name: cb_postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER}"]
      interval: 10s
      retries: 5
    restart: unless-stopped

  # ------------------------
  # Redis: Celery Broker
  # ------------------------
  redis:
    image: redis:6-alpine
    container_name: cb_redis
    ports:
      - '6379:6379'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      retries: 5
    restart: unless-stopped

  # ------------------------------------------------
  # Airflow: Init DB + Create User + Connections
  # ------------------------------------------------
  airflow-init:
    image: apache/airflow:2.5.1
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: "minio requests"
    container_name: cb_airflow_init
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    entrypoint: > 
      bash -c "airflow db init \
        && airflow users create \
             --username admin \
             --firstname Admin \
             --lastname User \
             --role Admin \
             --email admin@example.com \
             --password ${AIRFLOW_ADMIN_PASSWORD} \
        && airflow connections add minio_default \
             --conn-uri 's3://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000/' \
        && airflow connections add postgres_default \
             --conn-uri 'postgresql://$${POSTGRES_USER}:$${POSTGRES_PASSWORD}@postgres:5432/$${POSTGRES_DB}'"
    restart: on-failure

  # ------------------
  # Airflow Scheduler
  # ------------------
  airflow-scheduler:
    image: apache/airflow:2.5.1
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: "minio requests"
    container_name: cb_airflow_scheduler
    depends_on:
      - airflow-init
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: scheduler
    restart: unless-stopped

  # ------------------
  # Airflow Webserver
  # ------------------
  airflow-webserver:
    image: apache/airflow:2.5.1
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: "minio requests"
    container_name: cb_airflow_webserver
    depends_on:
      - airflow-scheduler
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    ports:
      - '8080:8080'
    command: webserver
    restart: unless-stopped

  # ----------------
  # Airflow Worker
  # ----------------
  airflow-worker:
    image: apache/airflow:2.5.1
    environment:
      _PIP_ADDITIONAL_REQUIREMENTS: "minio requests"
    container_name: cb_airflow_worker
    depends_on:
      - airflow-scheduler
      - redis
    env_file:
      - .env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    command: celery worker
    restart: unless-stopped

volumes:
  minio_data:
  postgres_data:
  grafana_data:  # reservado para est√°gios futuros

networks:
  default:
    driver: bridge